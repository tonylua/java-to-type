{"version":3,"file":"j2type.js","sources":["../src/utils/type.ts","../src/parsers/ServiceParser.ts","../src/utils/text.ts","../src/utils/constants.ts","../src/parsers/BaseParser.ts","../src/parsers/EnumParser.ts","../src/parsers/PojoParser.ts","../src/utils/file.ts","../src/index.ts"],"sourcesContent":["const TypeMap = {\n  boolean: \"Boolean\",\n  Date: \"String\",\n  char: \"String\",\n  \"char[]\": \"String\",\n  byte: \"String\",\n  short: \"Number\",\n  int: \"Number\",\n  Integer: \"Number\",\n  long: \"Number\",\n  float: \"Number\",\n  double: \"Number\"\n};\n\n// https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\nexport const getJSType = function getJSType(javaType: string) {\n  // const arrRe: RegExp = /(?:\\w*)List<(?<itemType>\\w+)>/g;\n  const arrRe: RegExp = /(?:\\w*)List<(\\w+)>/g;\n  if (arrRe.test(javaType)) {\n    const m = new RegExp(arrRe).exec(javaType);\n    // return `${getJSType(m.groups.itemType)}[]`;\n    return `${getJSType(m[1])}[]`;\n  }\n  return TypeMap[javaType.toLowerCase()] || javaType;\n};\n","import { pick } from '../utils/object'\nimport { getJSType } from '../utils/type'\nimport { formatParagraph } from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ControllerType,\n  ServiceType,\n  ServiceParamType,\n  ParseType,\n  ParseResult,\n} from '../types/Parser'\nimport BaseParser from './BaseParser'\n\nconst ServiceParser: ParserContructor = class ServiceParser extends BaseParser {\n  static CONTROLLER_RE =\n    /@RestController\\s*\\n\\s*@RequestMapping\\(\\\"(?<url>[\\w\\/_-{}:]+?)\\\"\\)\\s*\\npublic\\s+class\\s+(?<name>\\w+?)Controller\\s+/g\n\n  static SERVICE_RE =\n    /(\\/\\*{2}\\n\\s+\\*\\s+(?<desc>[^@\\s]*?)\\n(?:[\\s\\S]+?))?@(?:(?<method>Get|Post|Update|Put|Delete)?)Mapping\\(\\s*(?:value\\s*=\\s*)?\"(?<url>[\\w\\/_-{}:]+?)\\\".*?\\)(?:[\\s\\S]+?)public\\s+(?<res>[\\w<>_[\\](,\\s)]+?)\\s+(?<name>[\\w_-]+?)\\((?<params_str>[\\s\\S]+?)?\\)?\\s*{/gi\n\n  static PARAM_RE =\n    /(?<param_annotation>@.*?\\s)?(?<param_type>[\\w<>_[\\](,\\s)]+?)\\s+(?<param_name>\\w+)(?:,\\s*)?/g\n\n  private controller: ControllerType\n  private services: ServiceType[]\n\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\n    super(javaCode, javaPath, meta)\n    this._getController()\n    this._getServices()\n    return this\n  }\n\n  private _getController() {\n    const match = new RegExp(ServiceParser.CONTROLLER_RE).exec(this.javaCode)\n    if (!match) throw new Error('invalid controller')\n    // https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\n    this.controller = { url: match[1], name: match[2] } // pick(match.groups, 'url', 'name');\n  }\n\n  private _getServices() {\n    const services: ServiceType[] = []\n    const sRe = new RegExp(ServiceParser.SERVICE_RE)\n    let serviceMatch: RegExpMatchArray\n    while ((serviceMatch = sRe.exec(this.javaCode)) !== null) {\n      // const {params_str} = serviceMatch.groups;\n      const params_str = serviceMatch[6]\n      const params: ServiceParamType[] = []\n      const pRe = new RegExp(ServiceParser.PARAM_RE)\n      let paramMatch: RegExpMatchArray\n      const paramStr = (params_str || '')\n        .replace(/[\\n\\r]/g, '')\n        .replace(/\\s+/g, ' ')\n      while ((paramMatch = pRe.exec(paramStr)) !== null) {\n        // const p: ServiceParamType = pick(paramMatch.groups,\n        //   'param_type', 'param_name', 'param_annotation');\n        const p: ServiceParamType = {\n          param_annotation: paramMatch[1],\n          param_type: paramMatch[2],\n          param_name: paramMatch[3],\n        }\n        params.push(p)\n      }\n      const hasDesc = /\\/\\*\\*/.test(serviceMatch[1])\n      const s: ServiceType = {\n        params,\n        // ...pick(serviceMatch.groups, 'desc', 'method', 'url', 'res', 'name')\n        desc: hasDesc ? serviceMatch[2] : '',\n        method: serviceMatch[3],\n        url: serviceMatch[4],\n        res: serviceMatch[5],\n        name: serviceMatch[6],\n      }\n      // console.log(Array.prototype.slice.call(serviceMatch, 0, 7), s)\n      services.push(s)\n    }\n    this.services = services\n  }\n\n  private _renderServices(service: ServiceType) {\n    const url = `${this.controller.url}${service.url}`.replace(/\\/+/g, '/')\n    const reqUrl = service.params.reduce(\n      (acc, param) => {\n        const { param_name, param_annotation: pa } = param\n        const placeholder = `{${param_name}}`\n        if (pa?.includes('PathVariable') && acc.includes(placeholder)) {\n          acc = acc.replace(placeholder, `$${placeholder}`)\n        }\n        return acc\n      },\n      '`' + (this.meta?.apiPrefix || '') + url + '`',\n    )\n    const funcName = url\n      .replace(/\\/{\\w+?}/g, '') // placeholder\n      .replace(/\\/(\\w)/g, (_, p1) => p1.toUpperCase())\n      .replace(/^\\w/, m => m.toLowerCase())\n    const jsdocParams = service.params\n      .map(param => {\n        const { param_type: pt, param_name: pn, param_annotation: pa } = param\n        const isHeader = pa?.includes('RequestHeader')\n        const isOptional = !pa || !pa.includes('@NotNull')\n        const pName = isHeader ? `headers.${pn}` : pn\n        const name = isOptional ? ` [${pName}]` : ` ${pName}`\n        return `* @param {${getJSType(pt)}} ${name}`.trim()\n      })\n      .join('\\n ')\n      .trim()\n    const mapParams = (param: ServiceParamType) => {\n      const { param_name: pn, param_annotation: pa } = param\n      const isHeader = pa?.includes('RequestHeader')\n      return isHeader ? null : pn\n    }\n    const funcArgs = service.params.map(mapParams).filter(Boolean).join(', ')\n    const bodyOrParams = service.params\n      .filter(({ param_annotation: pa }) => !pa || !pa.includes('PathVariable'))\n      .map(mapParams)\n      .filter(Boolean)\n      .map(param =>\n        this.javaCode.includes('ResponseBody') ? `...${param}` : param,\n      )\n    console.log(service.name, service.method)\n\n    let mtd = service.method.toLowerCase()\n    const paramsKey = /(post|put|patch|delete)/.test(mtd) ? 'body' : 'params'\n    const data = bodyOrParams.length\n      ? `${paramsKey}: {\n      ${bodyOrParams.join(',\\n      ')}\n    }`\n      : ''\n\n    return `/** ${service.desc} ${funcName}\n * @url ${url}\n * @method ${mtd.toUpperCase()}\n ${jsdocParams}\n * @return {Promise<${getJSType(service.res)}>}\\n */\\n\nexport function ${funcName} (${funcArgs}) {\n  return ${this.meta.jsDocServiceRequestInstanceName}({\n    url: ${reqUrl},\n    method: '${mtd}',\n    ${data}\n  })\n}\n  `\n  }\n\n  private _getJSDoc() {\n    const cont = formatParagraph(\n      this.services.map(this._renderServices.bind(this)).join('\\n').trim(),\n    )\n    return `${this.meta.jsDocServiceTopImport}\\n\\n${cont}`\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null,\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this._getJSDoc()\n    }\n\n    return rtn\n  }\n}\n\nexport default ServiceParser\n","export const replaceQuote = (str: string, replaceTo: string = \"\") =>\n  str.replace(/^\"/, replaceTo).replace(/\"$/, replaceTo);\n\nexport const formatParagraph = (str: string) =>\n  str.replace(/\\n\\s*\\n/gm, \"\\n\").trim();\n","import type {ParserMeta} from \"../types/Parser\";\n\nexport const DefaultParserMeta: ParserMeta = {\n  jsDocServiceRequestInstanceName: 'request',\n  jsDocServiceTopImport: `import request from '@/utils/request'`,\n}\n","import {DefaultParserMeta} from '../utils/constants';\nimport type {\n  IParser,\n  ParserMeta,\n  ParseType,\n  ParseResult,\n} from \"../types/Parser\";\n\nabstract class BaseParser implements IParser {\n  protected javaCode: string;\n  protected javaPath: string;\n  protected meta: ParserMeta;\n\n  constructor(\n    javaCode: string,\n    javaPath: string,\n    meta?: ParserMeta\n  ) {\n    this.javaCode = javaCode;\n    this.javaPath = javaPath;\n    this.meta = {\n      ...DefaultParserMeta,\n      ...meta\n    };\n    return this;\n  }\n\n  abstract parse(type: ParseType): ParseResult\n}\n\nexport default BaseParser;\n","import {pick} from '../utils/object'\nimport {getJSType} from '../utils/type'\nimport {formatParagraph, replaceQuote} from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ParseType,\n  ParseResult,\n  EnumProperty\n} from \"../types/Parser\";\nimport BaseParser from './BaseParser';\n\nconst EnumParser: ParserContructor = class EnumParser extends BaseParser {\n  static ENUM_RE = /public\\s+enum\\s+(?<enum_name>\\w+)/g\n\n  static PROPERTY_RE = /(?<key>[A-Z_]+?)(?:\\((?<value>\\S+?)\\s*(?:,\\s*(?<desc>\\S+?))?\\))?[,;]/gm\n\n  private enumName: string;\n  private properties: EnumProperty[];\n\n  constructor(\n    javaCode: string,\n    javaPath: string,\n    meta?: ParserMeta\n  ) {\n    super(javaCode, javaPath, meta);\n    this._getEnumName();\n    this._getProperties();\n    return this;\n  }\n\n  private _getEnumName() {\n    const cRe = new RegExp(EnumParser.ENUM_RE)\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode);\n    this.enumName = classMatch[1] // classMatch?.groups?.enum_name;\n  }\n\n  private _getProperties() {\n    const properties: EnumProperty[] = [];\n    const pRe = new RegExp(EnumParser.PROPERTY_RE)\n    let propertyMatch: RegExpMatchArray;\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\n      // const p: EnumProperty = pick(propertyMatch.groups, 'desc', 'key', 'value')\n      const p: EnumProperty = {\n        key: propertyMatch[1],\n        value: propertyMatch[2],\n        desc: propertyMatch[3]\n      }\n      p.type = /[\"']+/.test(p.value) ? 'String' : 'Number'\n      properties.push(p)\n    }\n    this.properties = properties;\n  }\n\n  private _getJSDoc() {\n    if (!this.properties.length) return '';\n    const enumType = getJSType(this.properties[0].type);\n    let result = new RegExp(EnumParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties.map((prop, propIdx) => {\n        const {desc, key, value, type} = prop\n        const pVlu = value ? `: ${replaceQuote(value, `'`)}` : `: ${propIdx}`\n        const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\n        return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\n      }).join('\\n').trim()\n      : '* @todo no property'\n    result = `export const ${this.enumName} = {\\n  ${result}\\n}\\n`\n    result = `/**\\n * @readonly\\n * @enum {${enumType}}\\n */\\n${result}`\n    return formatParagraph(result);\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this._getJSDoc()\n    }\n\n    return rtn;\n  }\n}\n\nexport default EnumParser;\n","import {pick} from '../utils/object'\nimport {getJSType} from '../utils/type'\nimport {formatParagraph} from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ParseType,\n  ParseResult,\n  PojoProperty\n} from \"../types/Parser\";\nimport BaseParser from './BaseParser';\n\nconst PojoParser: ParserContructor = class PojoParser extends BaseParser {\n  static CLASS_RE = /public\\s+class\\s+(?<class_name>\\w+)/g\n\n  // TODO 判断是否只读\n  static PROPERTY_RE = /(?:\\s*\\/\\*{2}\\s*\\n\\s*\\*\\s+(?<desc>(?:[^@].)+?)[\\s\\S]*?)?private\\s+(?<type>[\\w<>[\\]]+)\\s+(?<name>\\w+);/g\n\n  private className: string;\n  private properties: PojoProperty[];\n\n  constructor(\n    javaCode: string,\n    javaPath: string,\n    meta?: ParserMeta\n  ) {\n    super(javaCode, javaPath, meta);\n    this._getClassName();\n    this._getProperties();\n    return this;\n  }\n\n  private _getClassName() {\n    const cRe = new RegExp(PojoParser.CLASS_RE)\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode);\n    this.className = classMatch[1] // classMatch?.groups?.class_name;\n  }\n\n  private _getProperties() {\n    const properties: PojoProperty[] = [];\n    const pRe = new RegExp(PojoParser.PROPERTY_RE)\n    let propertyMatch: RegExpMatchArray;\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\n      const p: PojoProperty = {\n        // ...pick(propertyMatch.groups, 'desc', 'type', 'name'),\n        desc: propertyMatch[1],\n        type: propertyMatch[2],\n        name: propertyMatch[3],\n        isOptional: !propertyMatch[0].includes('@NotNull')\n      }\n      properties.push(p)\n    }\n    this.properties = properties;\n  }\n\n  private _getJSDoc() {\n    let result = new RegExp(PojoParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties.map(prop => {\n        const {desc, name, type, isOptional} = prop\n        const pName = isOptional ? ` [${name}]` : ` ${name}`\n        const pDesc = desc ? ` - ${desc}` : ''\n        return `* @property {${getJSType(type)}} ${pName}${pDesc}`.trim()\n      }).join('\\n ').trim()\n      : '* @todo no property'\n    result = `/**\\n * @typedef {Object} ${this.className}\\n ${result}\\n*/`\n    return formatParagraph(result);\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this._getJSDoc()\n    }\n\n    return rtn;\n  }\n}\n\nexport default PojoParser;\n","const fs = require(\"fs\");\n\nexport const readJava = (filePath: string) => {\n  try {\n    return fs.readFileSync(filePath, \"utf8\");\n  } catch (ex) {\n    console.error(\"read error:\", filePath);\n    return null;\n  }\n};\n","import type {ParseOption, ParseResult, ParserContructor} from \"./types/Parser\";\nimport ServiceParser from \"./parsers/ServiceParser\";\nimport EnumParser from \"./parsers/EnumParser\";\nimport PojoParser from \"./parsers/PojoParser\";\nimport {readJava} from \"./utils/file\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\n// TODO 匹配更多特征\n// TODO 特征放在外部配置文件中\nfunction parseJava(javaCode: string, javaPath: string, option?: ParseOption) {\n  let Parser: ParserContructor | null = null;\n  // service\n  if (option?.isService || /@RestController/.test(javaCode))\n    Parser = ServiceParser;\n  // enum\n  else if (option?.isEnum || /public\\s+enum\\s+/.test(javaCode))\n    Parser = EnumParser;\n  // pojo\n  else if (/public\\s+class\\s+/.test(javaCode)) Parser = PojoParser;\n\n  if (Parser)\n    return new Parser(\n      javaCode,\n      javaPath,\n      option?.parserMeta\n    ).parse('jsdoc');\n\n  return null;\n}\n\nfunction parseDir(dirPath: string, option?: ParseOption) {\n  const files = fs.readdirSync(dirPath);\n  return files.reduce((acc: ParseResult[], file: File) => {\n    if (path.extname(file) !== \".java\") return acc;\n    const javaPath = path.join(dirPath, file);\n    const javaCode = readJava(javaPath);\n    if (!javaCode) return acc;\n    acc.push(parseJava(javaCode, javaPath, option));\n    return acc;\n  }, []);\n}\n\nmodule.exports = {\n  parseJava,\n  parseDir,\n};\n"],"names":["_class","TypeMap","boolean","Date","char","byte","short","int","Integer","long","float","double","getJSType","javaType","arrRe","test","RegExp","exec","toLowerCase","replaceQuote","str","replaceTo","replace","formatParagraph","trim","DefaultParserMeta","jsDocServiceRequestInstanceName","jsDocServiceTopImport","BaseParser","javaCode","javaPath","meta","this","_extends","ServiceParser","_BaseParser","_this","call","controller","services","_getController","_getServices","_assertThisInitialized","_inheritsLoose","_proto","prototype","match","CONTROLLER_RE","Error","url","name","serviceMatch","sRe","SERVICE_RE","params_str","params","pRe","PARAM_RE","paramMatch","paramStr","push","param_annotation","param_type","param_name","hasDesc","desc","method","res","_renderServices","service","_this$meta","_this2","reqUrl","reduce","acc","param","pa","placeholder","includes","apiPrefix","funcName","_","p1","toUpperCase","m","jsdocParams","map","pt","pn","pName","join","mapParams","funcArgs","filter","Boolean","bodyOrParams","_ref","console","log","mtd","paramsKey","data","length","_getJSDoc","cont","bind","parse","type","rtn","result","_wrapRegExp","EnumParser","enumName","properties","_getEnumName","_getProperties","classMatch","ENUM_RE","propertyMatch","PROPERTY_RE","p","key","value","enumType","prop","propIdx","enum_name","PojoParser","className","_getClassName","CLASS_RE","isOptional","pDesc","class_name","fs","require","path","parseJava","option","Parser","isService","isEnum","parserMeta","module","exports","parseDir","dirPath","readdirSync","file","extname","filePath","readFileSync","ex","error","readJava"],"mappings":"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"}
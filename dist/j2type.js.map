{"version":3,"file":"j2type.js","sources":["../src/utils/type.ts","../src/utils/text.ts","../src/parsers/ServiceParser.ts","../src/parsers/EnumParser.ts","../src/parsers/PojoParser.ts","../src/utils/constants.ts","../src/parsers/BaseParser.ts","../src/utils/file.ts","../src/index.ts"],"sourcesContent":["import type { ParserMeta } from '../types/Parser'\nconst path = require('path')\n\nconst TypeMap = {\n  'boolean': 'Boolean',\n  'Date': 'String',\n  'char': 'String',\n  'char[]': 'String',\n  'String': 'String',\n  'byte': 'String',\n  'short': 'Number',\n  'int': 'Number',\n  'Integer': 'Number',\n  'long': 'Number',\n  'float': 'Number',\n  'double': 'Number',\n}\n\n// https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\nexport const getJSType = function getJSType(\n  javaType: string,\n  isTypescript = false,\n) {\n  // const arrRe: RegExp = /(?:\\w*)List<(?<itemType>\\w+)>/g;\n  const arrRe: RegExp = /(?:\\w*)List<(\\w+)>/g\n  if (arrRe.test(javaType)) {\n    const m = new RegExp(arrRe).exec(javaType)\n    // return `${getJSType(m.groups.itemType)}[]`;\n    return `${getJSType(m[1], isTypescript)}[]`\n  }\n  const mapped = TypeMap[javaType.toLowerCase()]\n  if (mapped) return isTypescript ? mapped.toLowerCase() : mapped\n  return javaType\n}\n\nexport function getOrImportType(javaType: string, parserMeta: ParserMeta) {\n  const serviceMeta = parserMeta.serviceMeta\n  let t = getJSType(javaType, parserMeta.outputTS)\n\n  const arrMatch = /^(.*?)(\\[\\])+$/.exec(t)\n  if (arrMatch) return getOrImportType(arrMatch[1], serviceMeta) + arrMatch[2]\n\n  const genericMatch = /^(.*?)<(.*?)>$/.exec(t)\n  if (genericMatch) {\n    const types = genericMatch[2]\n      .split(/\\s*\\,\\s*/)\n      .map(t => getOrImportType(t, serviceMeta))\n      .join(', ')\n    return `${genericMatch[1]}<${types}>`\n  }\n\n  if (t in global.dtsCache) {\n    const javaDir = path.dirname(global.dtsCache[t])\n    const metaKey = Object.keys(serviceMeta).find(k => k === javaDir)\n    if (metaKey) {\n      const dtsPath = serviceMeta[metaKey].replace(/\\.d\\.ts$/, '')\n      t = `import('${dtsPath}').${t}`\n    }\n  }\n\n  return t\n}\n","export const replaceQuote = (str: string, replaceTo: string = \"\") =>\n  str.replace(/^\"/, replaceTo).replace(/\"$/, replaceTo);\n\nexport const formatParagraph = (str: string) =>\n  str.replace(/\\n\\s*\\n/gm, \"\\n\").trim();\n","import { getOrImportType } from '../utils/type'\nimport { formatParagraph } from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ControllerType,\n  ServiceType,\n  ServiceParamType,\n  ParseType,\n  ParseResult,\n} from '../types/Parser'\nimport BaseParser from './BaseParser'\n\nconst ServiceParser: ParserContructor = class ServiceParser extends BaseParser {\n  static CONTROLLER_RE =\n    /@RestController\\s*\\n\\s*@RequestMapping\\(\\\"(?<url>[\\w\\/_-{}:]+?)\\\"\\)\\s*\\npublic\\s+class\\s+(?<name>\\w+?)Controller\\s+/g\n\n  static SERVICE_RE =\n    /(\\/\\*{2}\\n\\s+\\*\\s+(?<desc>[^@\\s]*?)\\n(?:[\\s\\S]+?))?@(?:(?<method>Get|Post|Update|Put|Delete)?)Mapping\\(\\s*(?:value\\s*=\\s*)?\"(?<url>[\\w\\/_-{}:]+?)\\\".*?\\)(?:[\\s\\S]+?)public\\s+(?<res>[\\w<>_[\\](,\\s)]+?)\\s+(?<name>[\\w_-]+?)\\((?<params_str>[\\s\\S]*?)\\)?\\s*{/gi\n\n  static PARAM_RE =\n    /(?<param_annotation>@.*?\\s)?(?<param_type>[\\w<>_[\\](,\\s)]+?)\\s+(?<param_name>\\w+)(?:,\\s*)?/g\n\n  private controller: ControllerType\n  private services: ServiceType[]\n\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\n    super(javaCode, javaPath, meta)\n    this._getController()\n    this._getServices()\n    return this\n  }\n\n  private _getController() {\n    const match = new RegExp(ServiceParser.CONTROLLER_RE).exec(this.javaCode)\n    if (!match) throw new Error('invalid controller')\n    // https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\n    this.controller = { url: match[1], name: match[2] } // pick(match.groups, 'url', 'name');\n  }\n\n  private _getServices() {\n    const services: ServiceType[] = []\n    const sRe = new RegExp(ServiceParser.SERVICE_RE)\n    let serviceMatch: RegExpMatchArray\n    while ((serviceMatch = sRe.exec(this.javaCode)) !== null) {\n      // const {params_str} = serviceMatch.groups;\n      console.log(Array.from(serviceMatch))\n      const params_str = serviceMatch[7]\n      const params: ServiceParamType[] = []\n      const pRe = new RegExp(ServiceParser.PARAM_RE)\n      let paramMatch: RegExpMatchArray\n      const paramStr = (params_str || '')\n        .replace(/[\\n\\r]/g, '')\n        .replace(/\\s+/g, ' ')\n      console.log(333, params_str, paramStr)\n      while ((paramMatch = pRe.exec(paramStr)) !== null) {\n        // const p: ServiceParamType = pick(paramMatch.groups,\n        //   'param_type', 'param_name', 'param_annotation');\n        const p: ServiceParamType = {\n          param_annotation: paramMatch[1],\n          param_type: paramMatch[2],\n          param_name: paramMatch[3],\n        }\n        params.push(p)\n      }\n      const hasDesc = /\\/\\*\\*/.test(serviceMatch[1])\n      const s: ServiceType = {\n        params,\n        // ...pick(serviceMatch.groups, 'desc', 'method', 'url', 'res', 'name')\n        desc: hasDesc ? serviceMatch[2] : '',\n        method: serviceMatch[3],\n        url: serviceMatch[4],\n        res: serviceMatch[5],\n        name: serviceMatch[6],\n      }\n      // console.log(Array.prototype.slice.call(serviceMatch, 0, 7), s)\n      services.push(s)\n    }\n    this.services = services\n  }\n\n  private _renderServices(service: ServiceType) {\n    const url = `${this.controller.url}${service.url}`.replace(/\\/+/g, '/')\n    const reqUrl = service.params.reduce(\n      (acc, param) => {\n        const { param_name, param_annotation: pa } = param\n        const placeholder = `{${param_name}}`\n        if (pa?.includes('PathVariable') && acc.includes(placeholder)) {\n          acc = acc.replace(placeholder, `$${placeholder}`)\n        }\n        return acc\n      },\n      '`' + (this.meta?.apiPrefix || '') + url + '`',\n    )\n    const funcName = url\n      .replace(/\\/{\\w+?}/g, '') // placeholder\n      .replace(/\\/(\\w)/g, (_, p1) => p1.toUpperCase())\n      .replace(/^\\w/, m => m.toLowerCase())\n    const jsdocParams = service.params\n      .map(param => {\n        const { param_type: pt, param_name: pn, param_annotation: pa } = param\n        const isHeader = pa?.includes('RequestHeader')\n        const isOptional = !pa || !pa.includes('@NotNull')\n        const pName = isHeader ? `headers.${pn}` : pn\n        const name = isOptional ? ` [${pName}]` : ` ${pName}`\n        return `* @param {${getOrImportType(pt, this.meta)}} ${name}`.trim()\n      })\n      .join('\\n ')\n      .trim()\n    const mapParams = (param: ServiceParamType) => {\n      const { param_name: pn, param_annotation: pa } = param\n      const isHeader = pa?.includes('RequestHeader')\n      return isHeader ? null : pn\n    }\n    const funcArgs = service.params.map(mapParams).filter(Boolean).join(', ')\n    const bodyOrParams = service.params\n      .filter(({ param_annotation: pa }) => !pa || !pa.includes('PathVariable'))\n      .map(mapParams)\n      .filter(Boolean)\n      .map(param =>\n        this.javaCode.includes('ResponseBody') ? `...${param}` : param,\n      )\n    // console.log(service.name, service.method)\n\n    let mtd = service.method.toLowerCase()\n    const paramsKey = /(post|put|patch|delete)/.test(mtd) ? 'body' : 'params'\n    const data = bodyOrParams.length\n      ? `${paramsKey}: {\n      ${bodyOrParams.join(',\\n      ')}\n    }`\n      : ''\n\n    return `/** ${service.desc} ${funcName}\n * @url ${url}\n * @method ${mtd.toUpperCase()}\n ${jsdocParams}\n * @return {Promise<${getOrImportType(service.res, this.meta)}>}\\n */\\n\nexport function ${funcName} (${funcArgs}) {\n  return ${this.meta.jsDocServiceRequestInstanceName}({\n    url: ${reqUrl},\n    method: '${mtd}',\n    ${data}\n  })\n}\n  `\n  }\n\n  private _getJSDoc() {\n    const cont = formatParagraph(\n      this.services.map(this._renderServices.bind(this)).join('\\n').trim(),\n    )\n    return `${this.meta.jsDocServiceTopImport}\\n\\n${cont}`\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null,\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this._getJSDoc()\n    }\n\n    return rtn\n  }\n}\n\nexport default ServiceParser\n","import { pick } from '../utils/object'\nimport { getJSType } from '../utils/type'\nimport { formatParagraph, replaceQuote } from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ParseType,\n  ParseResult,\n  EnumProperty,\n} from '../types/Parser'\nimport BaseParser from './BaseParser'\n\nconst EnumParser: ParserContructor = class EnumParser extends BaseParser {\n  static ENUM_RE = /public\\s+enum\\s+(?<enum_name>\\w+)/g\n\n  static PROPERTY_RE =\n    /(?<key>[A-Z_]+?)(?:\\((?<value>\\S+?)\\s*(?:,\\s*(?<desc>\\S+?))?\\))?[,;]/gm\n\n  private enumName: string\n  private properties: EnumProperty[]\n\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\n    super(javaCode, javaPath, meta)\n    this._getEnumName()\n    this._getProperties()\n    return this\n  }\n\n  private _getEnumName() {\n    const cRe = new RegExp(EnumParser.ENUM_RE)\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode)\n    this.enumName = classMatch[1] // classMatch?.groups?.enum_name;\n  }\n\n  private _getProperties() {\n    const properties: EnumProperty[] = []\n    const pRe = new RegExp(EnumParser.PROPERTY_RE)\n    let propertyMatch: RegExpMatchArray\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\n      // const p: EnumProperty = pick(propertyMatch.groups, 'desc', 'key', 'value')\n      const p: EnumProperty = {\n        key: propertyMatch[1],\n        value: propertyMatch[2],\n        desc: propertyMatch[3],\n      }\n      p.type = /[\"']+/.test(p.value) ? 'String' : 'Number'\n      properties.push(p)\n    }\n    this.properties = properties\n  }\n\n  private _getJSDocWithTS() {\n    if (!this.properties.length) return ''\n    const enumType = getJSType(this.properties[0].type, this.meta.outputTS)\n    let result = new RegExp(EnumParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties\n          .map((prop, propIdx) => {\n            const { desc, key, value, type } = prop\n            const pVlu = value ? ` = ${replaceQuote(value, `'`)}` : ``\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\n          })\n          .join('\\n')\n          .trim()\n      : '/*TODO no property*/'\n    result = `export enum ${this.enumName} {\\n  ${result}\\n}\\n`\n    global.dtsCache[this.enumName] = this.javaPath\n    return formatParagraph(result)\n  }\n\n  private _getJSDoc() {\n    if (!this.properties.length) return ''\n    const enumType = getJSType(this.properties[0].type)\n    let result = new RegExp(EnumParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties\n          .map((prop, propIdx) => {\n            const { desc, key, value, type } = prop\n            const pVlu = value\n              ? `: ${replaceQuote(value, `'`)}`\n              : `: ${propIdx}`\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\n          })\n          .join('\\n')\n          .trim()\n      : '* @todo no property'\n    result = `export const ${this.enumName} = {\\n  ${result}\\n}\\n`\n    result = `/**\\n * @readonly\\n * @enum {${enumType}}\\n */\\n${result}`\n    return formatParagraph(result)\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null,\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this.meta.outputTS\n        ? this._getJSDocWithTS()\n        : this._getJSDoc()\n    }\n\n    return rtn\n  }\n}\n\nexport default EnumParser\n","import { pick } from '../utils/object'\nimport { getJSType } from '../utils/type'\nimport { formatParagraph } from '../utils/text'\nimport type {\n  ParserMeta,\n  ParserContructor,\n  ParseType,\n  ParseResult,\n  PojoProperty,\n} from '../types/Parser'\nimport BaseParser from './BaseParser'\n\nconst PojoParser: ParserContructor = class PojoParser extends BaseParser {\n  static CLASS_RE = /public\\s+class\\s+(?<class_name>\\w+)/g\n\n  // TODO 判断是否只读\n  static PROPERTY_RE =\n    /(?:\\s*\\/\\*{2}\\s*\\n\\s*\\*\\s+(?<desc>(?:[^@].)+?)[\\s\\S]*?)?private\\s+(?<type>[\\w<>[\\]]+)\\s+(?<name>\\w+);/g\n\n  private className: string\n  private properties: PojoProperty[]\n\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\n    super(javaCode, javaPath, meta)\n    this._getClassName()\n    this._getProperties()\n    return this\n  }\n\n  private _getClassName() {\n    const cRe = new RegExp(PojoParser.CLASS_RE)\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode)\n    this.className = classMatch[1] // classMatch?.groups?.class_name;\n  }\n\n  private _getProperties() {\n    const properties: PojoProperty[] = []\n    const pRe = new RegExp(PojoParser.PROPERTY_RE)\n    let propertyMatch: RegExpMatchArray\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\n      const p: PojoProperty = {\n        // ...pick(propertyMatch.groups, 'desc', 'type', 'name'),\n        desc: propertyMatch[1],\n        type: propertyMatch[2],\n        name: propertyMatch[3],\n        isOptional: !propertyMatch[0].includes('@NotNull'),\n      }\n      properties.push(p)\n    }\n    this.properties = properties\n  }\n\n  private _getJSDoc() {\n    let result = new RegExp(PojoParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties\n          .map(prop => {\n            const { desc, name, type, isOptional } = prop\n            const pName = isOptional ? ` [${name}]` : ` ${name}`\n            const pDesc = desc ? ` - ${desc}` : ''\n            return `* @property {${getJSType(type)}} ${pName}${pDesc}`.trim()\n          })\n          .join('\\n ')\n          .trim()\n      : '* @todo no property'\n    result = `/**\\n * @typedef {Object} ${this.className}\\n ${result}\\n*/`\n    return formatParagraph(result)\n  }\n\n  private _getJSDocWithTS() {\n    let result = new RegExp(PojoParser.PROPERTY_RE).test(this.javaCode)\n      ? this.properties\n          .map(prop => {\n            const { desc, name, type, isOptional } = prop\n            const pType = getJSType(type, this.meta.outputTS)\n            const pOptional = isOptional ? `?` : ``\n            const pDesc = desc ? ` // ${desc}` : ''\n            return `${name}${pOptional}: ${pType};${pDesc}`.trim()\n          })\n          .join('\\n ')\n          .trim()\n      : '/*TODO no property*/'\n    result = `export type ${this.className} = {\\n ${result}\\n}\\n`\n    global.dtsCache[this.className] = this.javaPath\n    return formatParagraph(result)\n  }\n\n  // TODO ts\n  parse(type: ParseType = 'jsdoc') {\n    const rtn: ParseResult = {\n      javaPath: this.javaPath,\n      result: null,\n    }\n\n    if (type === 'jsdoc') {\n      rtn.result = this.meta.outputTS\n        ? this._getJSDocWithTS()\n        : this._getJSDoc()\n    }\n\n    return rtn\n  }\n}\n\nexport default PojoParser\n","import type {ParserMeta} from \"../types/Parser\";\n\nexport const DefaultParserMeta: ParserMeta = {\n  jsDocServiceRequestInstanceName: 'request',\n  jsDocServiceTopImport: `import request from '@/utils/request'`,\n}\n","import {DefaultParserMeta} from '../utils/constants';\nimport type {\n  IParser,\n  ParserMeta,\n  ParseType,\n  ParseResult,\n} from \"../types/Parser\";\n\nabstract class BaseParser implements IParser {\n  protected javaCode: string;\n  protected javaPath: string;\n  protected meta: ParserMeta;\n\n  constructor(\n    javaCode: string,\n    javaPath: string,\n    meta?: ParserMeta\n  ) {\n    this.javaCode = javaCode;\n    this.javaPath = javaPath;\n    this.meta = {\n      ...DefaultParserMeta,\n      ...meta\n    };\n    return this;\n  }\n\n  abstract parse(type: ParseType): ParseResult\n}\n\nexport default BaseParser;\n","const fs = require(\"fs\");\n\nexport const readJava = (filePath: string) => {\n  try {\n    return fs.readFileSync(filePath, \"utf8\");\n  } catch (ex) {\n    console.error(\"read error:\", filePath);\n    return null;\n  }\n};\n","import type { ParseOption, ParseResult, ParserContructor } from './types/Parser'\nimport ServiceParser from './parsers/ServiceParser'\nimport EnumParser from './parsers/EnumParser'\nimport PojoParser from './parsers/PojoParser'\nimport { readJava } from './utils/file'\nconst fs = require('fs')\nconst path = require('path')\n\nglobal.dtsCache = {}\n\n// TODO 匹配更多特征\n// TODO 特征放在外部配置文件中\nfunction parseJava(javaCode: string, javaPath: string, option?: ParseOption) {\n  let Parser: ParserContructor | null = null\n  // service\n  if (option?.isService || /@RestController/.test(javaCode))\n    Parser = ServiceParser\n  // enum\n  else if (option?.isEnum || /public\\s+enum\\s+/.test(javaCode))\n    Parser = EnumParser\n  // pojo\n  else if (/public\\s+class\\s+/.test(javaCode)) Parser = PojoParser\n\n  if (Parser)\n    return new Parser(javaCode, javaPath, option?.parserMeta).parse('jsdoc')\n\n  return null\n}\n\nfunction parseDir(dirPath: string, option?: ParseOption) {\n  const files = fs.readdirSync(dirPath)\n  return files.reduce((acc: ParseResult[], file: File) => {\n    if (path.extname(file) !== '.java') return acc\n    const javaPath = path.join(dirPath, file)\n    const javaCode = readJava(javaPath)\n    if (!javaCode) return acc\n    acc.push(parseJava(javaCode, javaPath, option))\n    return acc\n  }, [])\n}\n\nmodule.exports = {\n  parseJava,\n  parseDir,\n}\n"],"names":["path","require","TypeMap","boolean","Date","char","String","byte","short","int","Integer","long","float","double","getJSType","javaType","isTypescript","arrRe","test","RegExp","exec","mapped","toLowerCase","getOrImportType","parserMeta","serviceMeta","t","outputTS","arrMatch","genericMatch","types","split","map","join","global","dtsCache","javaDir","dirname","metaKey","Object","keys","find","k","replace","_class","replaceQuote","str","replaceTo","formatParagraph","trim","DefaultParserMeta","jsDocServiceRequestInstanceName","jsDocServiceTopImport","BaseParser","javaCode","javaPath","meta","this","_extends","ServiceParser","_BaseParser","_this","call","controller","services","_getController","_getServices","_assertThisInitialized","_inheritsLoose","_proto","prototype","match","CONTROLLER_RE","Error","url","name","serviceMatch","sRe","SERVICE_RE","console","log","Array","from","params_str","params","pRe","PARAM_RE","paramMatch","paramStr","push","param_annotation","param_type","param_name","hasDesc","desc","method","res","_renderServices","service","_this$meta","_this2","reqUrl","reduce","acc","param","pa","placeholder","includes","apiPrefix","funcName","_","p1","toUpperCase","m","jsdocParams","pt","pn","pName","mapParams","funcArgs","filter","Boolean","bodyOrParams","_ref","mtd","paramsKey","data","length","_getJSDoc","cont","bind","parse","type","rtn","result","_wrapRegExp","EnumParser","enumName","properties","_getEnumName","_getProperties","classMatch","ENUM_RE","propertyMatch","PROPERTY_RE","p","key","value","_getJSDocWithTS","prop","propIdx","enumType","enum_name","PojoParser","className","_getClassName","CLASS_RE","isOptional","pDesc","pType","class_name","fs","parseJava","option","Parser","isService","isEnum","module","exports","parseDir","dirPath","readdirSync","file","extname","filePath","readFileSync","ex","error","readJava"],"mappings":"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"}
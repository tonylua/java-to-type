{"version":3,"file":"j2type.js","sources":["../src/utils/type.ts","../src/utils/text.ts","../src/parsers/ServiceParser.ts","../src/parsers/EnumParser.ts","../src/parsers/PojoParser.ts","../src/parsers/ConstantParser.ts","../src/utils/constants.ts","../src/parsers/BaseParser.ts","../src/utils/file.ts","../src/index.ts"],"sourcesContent":["import type { ParserMeta } from '../types/Parser'\r\nconst path = require('path')\r\n\r\nconst TypeMap = {\r\n  'boolean': 'Boolean',\r\n  'Date': 'String',\r\n  'char': 'String',\r\n  'char[]': 'String',\r\n  'String': 'String',\r\n  'byte': 'String',\r\n  'short': 'Number',\r\n  'int': 'Number',\r\n  'Integer': 'Number',\r\n  'long': 'Number',\r\n  'float': 'Number',\r\n  'double': 'Number',\r\n}\r\n\r\n// https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\r\nexport const getJSType = function getJSType(\r\n  javaType: string,\r\n  isTypescript = false,\r\n) {\r\n  // const arrRe: RegExp = /(?:\\w*)List<(?<itemType>\\w+)>/g;\r\n  const arrRe: RegExp = /(?:\\w*)List<(\\w+)>/g\r\n  if (arrRe.test(javaType)) {\r\n    const m = new RegExp(arrRe).exec(javaType)\r\n    // return `${getJSType(m.groups.itemType)}[]`;\r\n    return `${getJSType(m[1], isTypescript)}[]`\r\n  }\r\n  const mapped = TypeMap[javaType] || TypeMap[javaType.toLowerCase()]\r\n  if (mapped) return isTypescript ? mapped.toLowerCase() : mapped\r\n  return javaType\r\n}\r\n\r\nexport function getOrImportType(javaType: string, parserMeta: ParserMeta) {\r\n  const serviceMeta = parserMeta?.serviceMeta\r\n  let t = getJSType(javaType, parserMeta?.outputTS)\r\n\r\n  const arrMatch = /^(.*?)(\\[\\])+$/.exec(t)\r\n  if (arrMatch) return getOrImportType(arrMatch[1], serviceMeta) + arrMatch[2]\r\n\r\n  const genericMatch = /^(.*?)<(.*?)>$/.exec(t)\r\n  if (genericMatch) {\r\n    const types = genericMatch[2]\r\n      .split(/\\s*\\,\\s*/)\r\n      .map(t => getOrImportType(t, serviceMeta))\r\n      .join(', ')\r\n    return `${genericMatch[1]}<${types}>`\r\n  }\r\n\r\n  if (t in global.dtsCache) {\r\n    const javaDir = path.dirname(global.dtsCache[t])\r\n    const metaKey = Object.keys(serviceMeta).find(k => k === javaDir)\r\n    if (metaKey) {\r\n      const dtsPath = serviceMeta[metaKey].replace(/\\.d\\.ts$/, '')\r\n      t = `import('${dtsPath}').${t}`\r\n    }\r\n  }\r\n\r\n  return t\r\n}\r\n","export const replaceQuote = (str: string, replaceTo: string = \"\") =>\r\n  str.replace(/^\"/, replaceTo).replace(/\"$/, replaceTo);\r\n\r\nexport const formatParagraph = (str: string) =>\r\n  str.replace(/\\n\\s*\\n/gm, \"\\n\").trim();\r\n","import { getOrImportType } from '../utils/type'\r\nimport { formatParagraph } from '../utils/text'\r\nimport type {\r\n  ParserMeta,\r\n  ParserContructor,\r\n  ControllerType,\r\n  ServiceType,\r\n  ServiceParamType,\r\n  ParseType,\r\n  ParseResult,\r\n} from '../types/Parser'\r\nimport BaseParser from './BaseParser'\r\n\r\nconst ServiceParser: ParserContructor = class ServiceParser extends BaseParser {\r\n  static CONTROLLER_RE =\r\n    /@RestController\\s*\\n\\s*@RequestMapping\\(\\\"(?<url>[\\w\\/_-{}:]+?)\\\"\\)[\\s\\S]*?\\npublic\\s+class\\s+(?<name>\\w+?)Controller\\s+/g\r\n\r\n  static SERVICE_RE =\r\n    /(\\/\\*{2}\\n\\s+\\*\\s+(?<desc>[^@\\s]*?)\\n(?:[\\s\\S]+?))?@(?:(?<method>Get|Post|Update|Put|Delete)?)Mapping\\(\\s*(?:value\\s*=\\s*)?\"(?<url>[\\w\\/_-{}:]+?)\\\".*?\\)(?:[\\s\\S]+?)public\\s+(?<res>[\\w<>_[\\](,\\s)]+?)\\s+(?<name>[\\w_-]+?)\\((?<params_str>[\\s\\S]*)\\)?\\s*{/gi\r\n\r\n  static PARAM_RE =\r\n    /(?<param_annotation>@.*?\\s)?(?<param_type>[\\w<>_[\\](,\\s)]+?)\\s+(?<param_name>\\w+)(?:,\\s*)?/g\r\n\r\n  static match(code: string) {\r\n    const { CONTROLLER_RE, SERVICE_RE } = ServiceParser\r\n    return (\r\n      new RegExp(CONTROLLER_RE).test(code) && new RegExp(SERVICE_RE).test(code)\r\n    )\r\n  }\r\n\r\n  private controller: ControllerType\r\n  private services: ServiceType[]\r\n\r\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\r\n    super(javaCode, javaPath, meta)\r\n    this._getController()\r\n    this._getServices()\r\n    return this\r\n  }\r\n\r\n  private _getController() {\r\n    const match = new RegExp(ServiceParser.CONTROLLER_RE).exec(this.javaCode)\r\n    if (!match) throw new Error('invalid controller')\r\n    // https://github.com/microsoft/TypeScript/issues/36132#issuecomment-573141594\r\n    this.controller = { url: match[1], name: match[2] } // pick(match.groups, 'url', 'name');\r\n  }\r\n\r\n  private _getServices() {\r\n    const services: ServiceType[] = []\r\n    const sRe = new RegExp(ServiceParser.SERVICE_RE)\r\n    let serviceMatch: RegExpMatchArray\r\n    while ((serviceMatch = sRe.exec(this.javaCode)) !== null) {\r\n      // const {params_str} = serviceMatch.groups;\r\n      // console.log(Array.from(serviceMatch))\r\n      const params_str = serviceMatch[7]\r\n      const params: ServiceParamType[] = []\r\n      const pRe = new RegExp(ServiceParser.PARAM_RE)\r\n      let paramMatch: RegExpMatchArray\r\n      const paramStr = (params_str || '')\r\n        .replace(/[\\n\\r]/g, '')\r\n        .replace(/\\s+/g, ' ')\r\n      // console.log(333, params_str, paramStr)\r\n      while ((paramMatch = pRe.exec(paramStr)) !== null) {\r\n        // const p: ServiceParamType = pick(paramMatch.groups,\r\n        //   'param_type', 'param_name', 'param_annotation');\r\n        const p: ServiceParamType = {\r\n          param_annotation: paramMatch[1],\r\n          param_type: paramMatch[2],\r\n          param_name: paramMatch[3],\r\n        }\r\n        params.push(p)\r\n      }\r\n      const hasDesc = /\\/\\*\\*/.test(serviceMatch[1])\r\n      const s: ServiceType = {\r\n        params,\r\n        // ...pick(serviceMatch.groups, 'desc', 'method', 'url', 'res', 'name')\r\n        desc: hasDesc ? serviceMatch[2] : '',\r\n        method: serviceMatch[3],\r\n        url: serviceMatch[4],\r\n        res: serviceMatch[5],\r\n        name: serviceMatch[6],\r\n      }\r\n      // console.log(Array.prototype.slice.call(serviceMatch, 0, 7), s)\r\n      services.push(s)\r\n    }\r\n    this.services = services\r\n  }\r\n\r\n  private _renderServices(service: ServiceType) {\r\n    const url = `${this.controller.url}${service.url}`.replace(/\\/+/g, '/')\r\n    const reqUrl = service.params.reduce(\r\n      (acc, param) => {\r\n        const { param_name, param_annotation: pa } = param\r\n        const placeholder = `{${param_name}}`\r\n        if (pa?.includes('PathVariable') && acc.includes(placeholder)) {\r\n          acc = acc.replace(placeholder, `$${placeholder}`)\r\n        }\r\n        return acc\r\n      },\r\n      '`' + (this.meta?.apiPrefix || '') + url + '`',\r\n    )\r\n    const funcName = url\r\n      .replace(/\\/{\\w+?}/g, '') // placeholder\r\n      .replace(/\\/(\\w)/g, (_, p1) => p1.toUpperCase())\r\n      .replace(/^\\w/, m => m.toLowerCase())\r\n    const jsdocParams = service.params\r\n      .map(param => {\r\n        const { param_type: pt, param_name: pn, param_annotation: pa } = param\r\n        const isHeader = pa?.includes('RequestHeader')\r\n        const isOptional = !pa || !pa.includes('@NotNull')\r\n        const pName = isHeader ? `headers.${pn}` : pn\r\n        const name = isOptional ? ` [${pName}]` : ` ${pName}`\r\n        return `* @param {${getOrImportType(pt, this.meta)}} ${name}`.trim()\r\n      })\r\n      .join('\\n ')\r\n      .trim()\r\n    const mapParams = (param: ServiceParamType) => {\r\n      const { param_name: pn, param_annotation: pa } = param\r\n      const isHeader = pa?.includes('RequestHeader')\r\n      return isHeader ? null : pn\r\n    }\r\n    const funcArgs = service.params.map(mapParams).filter(Boolean).join(', ')\r\n    const bodyOrParams = service.params\r\n      .filter(({ param_annotation: pa }) => !pa || !pa.includes('PathVariable'))\r\n      .map(mapParams)\r\n      .filter(Boolean)\r\n      .map(param =>\r\n        this.javaCode.includes('ResponseBody') ? `...${param}` : param,\r\n      )\r\n    // console.log(service.name, service.method)\r\n\r\n    let mtd = service.method.toLowerCase()\r\n    const paramsKey = /(post|put|patch|delete)/.test(mtd) ? 'body' : 'params'\r\n    const data = bodyOrParams.length\r\n      ? `${paramsKey}: {\r\n      ${bodyOrParams.join(',\\n      ')}\r\n    }`\r\n      : ''\r\n\r\n    return `/** ${service.desc} ${funcName}\r\n * @url ${url}\r\n * @method ${mtd.toUpperCase()}\r\n ${jsdocParams}\r\n * @return {Promise<${getOrImportType(service.res, this.meta)}>}\\n */\\n\r\nexport function ${funcName} (${funcArgs}) {\r\n  return ${this.meta.jsDocServiceRequestInstanceName}({\r\n    url: ${reqUrl},\r\n    method: '${mtd}',\r\n    ${data}\r\n  })\r\n}\r\n  `\r\n  }\r\n\r\n  private _getJSDoc() {\r\n    const cont = formatParagraph(\r\n      this.services.map(this._renderServices.bind(this)).join('\\n').trim(),\r\n    )\r\n    return `${this.meta.jsDocServiceTopImport}\\n\\n${cont}`\r\n  }\r\n\r\n  // TODO ts\r\n  parse(type: ParseType = 'jsdoc') {\r\n    const rtn: ParseResult = {\r\n      javaPath: this.javaPath,\r\n      result: null,\r\n    }\r\n\r\n    if (type === 'jsdoc') {\r\n      rtn.result = this._getJSDoc()\r\n    }\r\n\r\n    return rtn\r\n  }\r\n}\r\n\r\nexport default ServiceParser\r\n","import { getJSType } from '../utils/type'\r\nimport { formatParagraph, replaceQuote } from '../utils/text'\r\nimport type {\r\n  ParserMeta,\r\n  ParserContructor,\r\n  ParseType,\r\n  ParseResult,\r\n  EnumProperty,\r\n} from '../types/Parser'\r\nimport BaseParser from './BaseParser'\r\n\r\nconst EnumParser: ParserContructor = class EnumParser extends BaseParser {\r\n  static ENUM_RE = /public\\s+enum\\s+(?<enum_name>\\w+)/g\r\n\r\n  static PROPERTY_RE =\r\n    /(?<key>[A-Z_]+?)(?:\\((?<value>\\S+?)\\s*(?:,\\s*(?<desc>\\S+?))?\\))?[,;]/gm\r\n\r\n  static match(code: string) {\r\n    const { ENUM_RE, PROPERTY_RE } = EnumParser\r\n    return new RegExp(ENUM_RE).test(code) && new RegExp(PROPERTY_RE).test(code)\r\n  }\r\n\r\n  private enumName: string\r\n  private properties: EnumProperty[]\r\n\r\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\r\n    super(javaCode, javaPath, meta)\r\n    this._getEnumName()\r\n    this._getProperties()\r\n    return this\r\n  }\r\n\r\n  private _getEnumName() {\r\n    const cRe = new RegExp(EnumParser.ENUM_RE)\r\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode)\r\n    this.enumName = classMatch?.[1] // classMatch?.groups?.enum_name;\r\n  }\r\n\r\n  private _getProperties() {\r\n    const properties: EnumProperty[] = []\r\n    const pRe = new RegExp(EnumParser.PROPERTY_RE)\r\n    let propertyMatch: RegExpMatchArray\r\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\r\n      // const p: EnumProperty = pick(propertyMatch.groups, 'desc', 'key', 'value')\r\n      const p: EnumProperty = {\r\n        key: propertyMatch[1],\r\n        value: propertyMatch[2],\r\n        desc: propertyMatch[3],\r\n      }\r\n      p.type = /[\"']+/.test(p.value) ? 'String' : 'Number'\r\n      properties.push(p)\r\n    }\r\n    this.properties = properties\r\n  }\r\n\r\n  private _getJSDocWithTS() {\r\n    if (!this.properties.length) return ''\r\n    const enumType = getJSType(this.properties[0].type, this.meta.outputTS)\r\n    let result = new RegExp(EnumParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map((prop, propIdx) => {\r\n            const { desc, key, value, type } = prop\r\n            const pVlu = value ? ` = ${replaceQuote(value, `'`)}` : ``\r\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\r\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\r\n          })\r\n          .join('\\n')\r\n          .trim()\r\n      : '/*TODO no property*/'\r\n    result = `export enum ${this.enumName} {\\n  ${result}\\n}\\n`\r\n    global.dtsCache[this.enumName] = this.javaPath\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  private _getJSDoc() {\r\n    if (!this.properties.length) return ''\r\n    const enumType = getJSType(this.properties[0].type)\r\n    let result = new RegExp(EnumParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map((prop, propIdx) => {\r\n            const { desc, key, value, type } = prop\r\n            const pVlu = value\r\n              ? `: ${replaceQuote(value, `'`)}`\r\n              : `: ${propIdx}`\r\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\r\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\r\n          })\r\n          .join('\\n')\r\n          .trim()\r\n      : '* @todo no property'\r\n    result = `export const ${this.enumName} = {\\n  ${result}\\n}\\n`\r\n    result = `/**\\n * @readonly\\n * @enum {${enumType}}\\n */\\n${result}`\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  // TODO ts\r\n  parse(type: ParseType = 'jsdoc') {\r\n    const rtn: ParseResult = {\r\n      javaPath: this.javaPath,\r\n      result: null,\r\n    }\r\n\r\n    if (type === 'jsdoc') {\r\n      rtn.result = this.meta.outputTS\r\n        ? this._getJSDocWithTS()\r\n        : this._getJSDoc()\r\n    }\r\n\r\n    return rtn\r\n  }\r\n}\r\n\r\nexport default EnumParser\r\n","import { getJSType } from '../utils/type'\r\nimport { formatParagraph } from '../utils/text'\r\nimport type {\r\n  ParserMeta,\r\n  ParserContructor,\r\n  ParseType,\r\n  ParseResult,\r\n  PojoProperty,\r\n} from '../types/Parser'\r\nimport BaseParser from './BaseParser'\r\n\r\nconst PojoParser: ParserContructor = class PojoParser extends BaseParser {\r\n  static CLASS_RE = /public\\s+class\\s+(?<class_name>\\w+)/g\r\n\r\n  // TODO 通过 getter/setter 判断是否只读? springboot @data注解?\r\n  static PROPERTY_RE = /(?:\\n(?:[^\\n\\S]|\\t)+\\/\\*{2}\\s*\\n\\s*\\*\\s+(?<desc>(?:[^@].+)?)[\\s\\S]*?)?private\\s+(?<type>[\\w<>[\\]]+)\\s+(?<name>\\w+);/g \r\n\r\n  static match(code: string) {\r\n    const { CLASS_RE, PROPERTY_RE } = PojoParser\r\n    return new RegExp(CLASS_RE).test(code) && new RegExp(PROPERTY_RE).test(code)\r\n  }\r\n\r\n  private className: string\r\n  private properties: PojoProperty[]\r\n\r\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\r\n    super(javaCode, javaPath, meta)\r\n    this._getClassName()\r\n    this._getProperties()\r\n    return this\r\n  }\r\n\r\n  private _getClassName() {\r\n    const cRe = new RegExp(PojoParser.CLASS_RE)\r\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode)\r\n    this.className = classMatch[1] // classMatch?.groups?.class_name;\r\n  }\r\n\r\n  private _getProperties() {\r\n    const properties: PojoProperty[] = []\r\n    const pRe = new RegExp(PojoParser.PROPERTY_RE)\r\n    let propertyMatch: RegExpMatchArray\r\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\r\n      const p: PojoProperty = {\r\n        // ...pick(propertyMatch.groups, 'desc', 'type', 'name'),\r\n        desc: propertyMatch[1],\r\n        type: propertyMatch[2],\r\n        name: propertyMatch[3],\r\n        isOptional: !propertyMatch[0].includes('@NotNull'),\r\n      }\r\n      properties.push(p)\r\n    }\r\n    this.properties = properties\r\n  }\r\n\r\n  private _getJSDoc() {\r\n    let result = new RegExp(PojoParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map(prop => {\r\n            const { desc, name, type, isOptional } = prop\r\n            const pName = isOptional ? ` [${name}]` : ` ${name}`\r\n            const pDesc = desc ? ` - ${desc}` : ''\r\n            return `* @property {${getJSType(type)}} ${pName}${pDesc}`.trim()\r\n          })\r\n          .join('\\n ')\r\n          .trim()\r\n      : '* @todo no property'\r\n    result = `/**\\n * @typedef {Object} ${this.className}\\n ${result}\\n*/`\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  private _getJSDocWithTS() {\r\n    let result = new RegExp(PojoParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map(prop => {\r\n            const { desc, name, type, isOptional } = prop\r\n            const pType = getJSType(type, this.meta.outputTS)\r\n            const pOptional = isOptional ? `?` : ``\r\n            const pDesc = desc ? ` // ${desc}` : ''\r\n            return `${name}${pOptional}: ${pType};${pDesc}`.trim()\r\n          })\r\n          .join('\\n ')\r\n          .trim()\r\n      : '/*TODO no property*/'\r\n    result = `export type ${this.className} = {\\n ${result}\\n}\\n`\r\n    global.dtsCache[this.className] = this.javaPath\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  // TODO ts\r\n  parse(type: ParseType = 'jsdoc') {\r\n    const rtn: ParseResult = {\r\n      javaPath: this.javaPath,\r\n      result: null,\r\n    }\r\n\r\n    if (type === 'jsdoc') {\r\n      rtn.result = this.meta.outputTS\r\n        ? this._getJSDocWithTS()\r\n        : this._getJSDoc()\r\n    }\r\n\r\n    return rtn\r\n  }\r\n}\r\n\r\nexport default PojoParser\r\n","import { getJSType } from '../utils/type'\r\nimport { formatParagraph, replaceQuote } from '../utils/text'\r\nimport type {\r\n  ParserMeta,\r\n  ParserContructor,\r\n  ParseType,\r\n  ParseResult,\r\n  EnumProperty,\r\n} from '../types/Parser'\r\nimport BaseParser from './BaseParser'\r\n\r\n// eslint-disable-next-line max-len\r\nconst ConstantParser: ParserContructor = class ConstantParser extends BaseParser {\r\n  static ENUM_RE = /public\\s+class\\s+(?<enum_name>\\w+)/g\r\n\r\n  static PROPERTY_RE =\r\n    /(?:\\s*\\/\\*{2}\\n\\s*\\*\\s+([^@\\s]+?)\\n[\\s\\S]+?)?public\\sstatic\\sfinal\\s([\\w<>[\\]]+)\\s+([\\w_]+)\\s*=\\s*((\"|[^\\s;$])+);?/g\r\n\r\n  static match(code: string) {\r\n    const { ENUM_RE, PROPERTY_RE } = ConstantParser\r\n    return new RegExp(ENUM_RE).test(code) && new RegExp(PROPERTY_RE).test(code)\r\n  }\r\n\r\n  private enumName: string\r\n  private properties: EnumProperty[]\r\n\r\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\r\n    super(javaCode, javaPath, meta)\r\n    this._getEnumName()\r\n    this._getProperties()\r\n    return this\r\n  }\r\n\r\n  private _getEnumName() {\r\n    const cRe = new RegExp(ConstantParser.ENUM_RE)\r\n    const classMatch: RegExpMatchArray = cRe.exec(this.javaCode)\r\n    this.enumName = classMatch[1] // classMatch?.groups?.enum_name;\r\n  }\r\n\r\n  private _getProperties() {\r\n    const properties: EnumProperty[] = []\r\n    const pRe = new RegExp(ConstantParser.PROPERTY_RE)\r\n    let propertyMatch: RegExpMatchArray\r\n    while ((propertyMatch = pRe.exec(this.javaCode)) !== null) {\r\n      const p: EnumProperty = {\r\n        desc: propertyMatch[1],\r\n        type: propertyMatch[2],\r\n        key: propertyMatch[3],\r\n        value: propertyMatch[4],\r\n      }\r\n      properties.push(p)\r\n    }\r\n    this.properties = properties\r\n  }\r\n\r\n  private _getJSDocWithTS() {\r\n    if (!this.properties.length) return ''\r\n    const enumType = getJSType(this.properties[0].type, this.meta.outputTS)\r\n    let result = new RegExp(ConstantParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map((prop, propIdx) => {\r\n            const { desc, key, value } = prop\r\n            const pVlu = value ? ` = ${replaceQuote(value, `'`)}` : ``\r\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\r\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\r\n          })\r\n          .join('\\n')\r\n          .trim()\r\n      : '/*TODO no property*/'\r\n    result = `export enum ${this.enumName} {\\n  ${result}\\n}\\n`\r\n    global.dtsCache[this.enumName] = this.javaPath\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  private _getJSDoc() {\r\n    if (!this.properties.length) return ''\r\n    const enumType = getJSType(this.properties[0].type)\r\n    let result = new RegExp(ConstantParser.PROPERTY_RE).test(this.javaCode)\r\n      ? this.properties\r\n          .map((prop, propIdx) => {\r\n            const { desc, key, value } = prop\r\n            const pVlu = value\r\n              ? `: ${replaceQuote(value, `'`)}`\r\n              : `: ${propIdx}`\r\n            const pDesc = desc ? `// ${replaceQuote(desc)}` : ``\r\n            return '  ' + `${key}${pVlu}, ${pDesc}`.trim()\r\n          })\r\n          .join('\\n')\r\n          .trim()\r\n      : '* @todo no property'\r\n    result = `export const ${this.enumName} = {\\n  ${result}\\n}\\n`\r\n    result = `/**\\n * @readonly\\n * @enum {${enumType}}\\n */\\n${result}`\r\n    return formatParagraph(result)\r\n  }\r\n\r\n  // TODO ts\r\n  parse(type: ParseType = 'jsdoc') {\r\n    const rtn: ParseResult = {\r\n      javaPath: this.javaPath,\r\n      result: null,\r\n    }\r\n\r\n    if (type === 'jsdoc') {\r\n      rtn.result = this.meta.outputTS\r\n        ? this._getJSDocWithTS()\r\n        : this._getJSDoc()\r\n    }\r\n\r\n    return rtn\r\n  }\r\n}\r\n\r\nexport default ConstantParser\r\n","import type {ParserMeta} from \"../types/Parser\";\r\n\r\nexport const DefaultParserMeta: ParserMeta = {\r\n  jsDocServiceRequestInstanceName: 'request',\r\n  jsDocServiceTopImport: `import request from '@/utils/request'`,\r\n}\r\n","import { DefaultParserMeta } from '../utils/constants'\r\nimport type {\r\n  IParser,\r\n  ParserMeta,\r\n  ParseType,\r\n  ParseResult,\r\n} from '../types/Parser'\r\n\r\nabstract class BaseParser implements IParser {\r\n  protected javaCode: string\r\n  protected javaPath: string\r\n  protected meta: ParserMeta\r\n\r\n  constructor(javaCode: string, javaPath: string, meta?: ParserMeta) {\r\n    this.javaCode = javaCode\r\n    this.javaPath = javaPath\r\n    this.meta = {\r\n      ...DefaultParserMeta,\r\n      ...meta,\r\n    }\r\n    return this\r\n  }\r\n\r\n  abstract parse(type: ParseType): ParseResult\r\n}\r\n\r\nexport default BaseParser\r\n","const fs = require(\"fs\");\r\n\r\nexport const readJava = (filePath: string) => {\r\n  try {\r\n    return fs.readFileSync(filePath, \"utf8\");\r\n  } catch (ex) {\r\n    console.error(\"read error:\", filePath);\r\n    return null;\r\n  }\r\n};\r\n","import type { ParseOption, ParseResult, ParserContructor } from './types/Parser'\r\nimport ServiceParser from './parsers/ServiceParser'\r\nimport EnumParser from './parsers/EnumParser'\r\nimport PojoParser from './parsers/PojoParser'\r\nimport ConstantParser from './parsers/ConstantParser'\r\nimport { readJava } from './utils/file'\r\nconst fs = require('fs')\r\nconst path = require('path')\r\n\r\nglobal.dtsCache = {}\r\n\r\n// TODO 匹配更多特征\r\n// TODO 特征放在外部配置文件中?\r\nfunction parseJava(javaCode: string, javaPath: string, option?: ParseOption) {\r\n  let Parser: ParserContructor | null = null\r\n  // service\r\n  if (ServiceParser.match(javaCode)) Parser = ServiceParser\r\n  // enum\r\n  else if (option?.isEnum)\r\n    Parser = EnumParser.match(javaCode)\r\n      ? EnumParser\r\n      : ConstantParser.match(javaCode)\r\n      ? ConstantParser\r\n      : null\r\n  // pojo\r\n  else if (PojoParser.match(javaCode)) Parser = PojoParser\r\n  if (!Parser) return null\r\n\r\n  return new Parser(javaCode, javaPath, option?.parserMeta).parse('jsdoc')\r\n}\r\n\r\nfunction parseDir(dirPath: string, option?: ParseOption) {\r\n  const files = fs.readdirSync(dirPath)\r\n  return files\r\n    .reduce((acc: ParseResult[], file: File) => {\r\n      if (path.extname(file) !== '.java') return acc\r\n      const javaPath = path.join(dirPath, file)\r\n      const javaCode = readJava(javaPath)\r\n      if (!javaCode) return acc\r\n      acc.push(parseJava(javaCode, javaPath, option))\r\n      return acc\r\n    }, [])\r\n    .filter(Boolean)\r\n}\r\n\r\nmodule.exports = {\r\n  parseJava,\r\n  parseDir,\r\n}\r\n"],"names":["path","require","TypeMap","boolean","Date","char","String","byte","short","int","Integer","long","float","double","getJSType","javaType","isTypescript","arrRe","test","RegExp","exec","mapped","toLowerCase","getOrImportType","parserMeta","serviceMeta","t","outputTS","arrMatch","genericMatch","types","split","map","join","global","dtsCache","javaDir","dirname","metaKey","Object","keys","find","k","replace","_class","replaceQuote","str","replaceTo","formatParagraph","trim","DefaultParserMeta","jsDocServiceRequestInstanceName","jsDocServiceTopImport","BaseParser","javaCode","javaPath","meta","this","_extends","ServiceParser","_BaseParser","_this","call","controller","services","_getController","_getServices","_assertThisInitialized","_inheritsLoose","match","code","SERVICE_RE","CONTROLLER_RE","_proto","prototype","Error","url","name","serviceMatch","sRe","params_str","params","pRe","PARAM_RE","paramMatch","paramStr","push","param_annotation","param_type","param_name","hasDesc","desc","method","res","_renderServices","service","_this$meta","_this2","reqUrl","reduce","acc","param","pa","placeholder","includes","apiPrefix","funcName","_","p1","toUpperCase","m","jsdocParams","pt","pn","pName","mapParams","funcArgs","filter","Boolean","bodyOrParams","_ref","mtd","paramsKey","data","length","_getJSDoc","cont","bind","parse","type","rtn","result","_wrapRegExp","EnumParser","enumName","properties","_getEnumName","_getProperties","PROPERTY_RE","ENUM_RE","classMatch","propertyMatch","p","key","value","_getJSDocWithTS","prop","propIdx","enumType","pDesc","enum_name","PojoParser","className","_getClassName","CLASS_RE","isOptional","class_name","ConstantParser","fs","parseJava","option","Parser","isEnum","module","exports","parseDir","dirPath","readdirSync","file","extname","filePath","readFileSync","ex","console","error","readJava"],"mappings":"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"}